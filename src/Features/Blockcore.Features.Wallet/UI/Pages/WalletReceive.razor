@page "/walletreceive/{walletname}/{accountname}"

@using Blockcore.Features.Wallet.Interfaces
@using Blockcore.Features.Wallet;
@using Blockcore.Features.Wallet.Types
@using Blockcore.Base.Deployments
@using Blockcore.Consensus.ScriptInfo
@using Blockcore.NBitcoin
@using Blockcore.Networks

@inject IWalletManager WalletManager
@inject NavigationManager NavigationManager
@inject NodeDeployments NodeDeployments
@inject Network Network

@{
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pb-2 mb-3 border-bottom">
    <h1 class="h2"><strong>Receive</strong></h1>
        <div class="btn-toolbar mb-2 mb-md-0">
        <Dropdown TItem="string" OnSelected="@OnSelected" >
            <InitialTip>@walletname</InitialTip>
            <ChildContent>
                @{
                    foreach (var walletName in this.WalletManager.GetWalletsNames()) {
                        foreach (var account in this.WalletManager.GetAccounts(walletName))
                        {
                        <DropdownListItem Item="@walletName">@walletName</DropdownListItem>
                        }
                    }
                }
            </ChildContent>
        </Dropdown>
            <button class="btn btn-sm btn-primary" @onclick="() => { NavigateToSendWallet(walletname, accountname); }">
                <span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Send
            </button>
        </div>
    </div>

    var result = this.WalletManager.GetUnusedAddress(new WalletAccountReference(walletname, accountname));

<div class="card">
  <div class="m-3">
            <div class="row">
                <div class="col-sm-2"><strong>Address:</strong></div>
                <div class="col-sm-10"><CopyToClipboard Text="@result.Address" /></div>
            </div>
        </div>
    </div>

    Types.Wallet wallet = this.WalletManager.GetWallet(walletname);
    HdAccount account = wallet.GetAccount(accountname);

    var accountmodel = new AddressesModel
            {
                Addresses = account.GetCombinedAddresses().Select(address =>
                {
                    (Money confirmedAmount, Money unConfirmedAmount, bool anyTrx) = address.GetBalances(wallet.walletStore, account.IsNormalAccount());

                    return new AddressModel
                    {
                        Address = address.Address,
                        IsUsed = anyTrx,
                        IsChange = address.IsChangeAddress(),
                        AmountConfirmed = confirmedAmount,
                        AmountUnconfirmed = unConfirmedAmount
                    };
                })
            };

    <div class="row mb-3">
        <div class="col-12 grid-margin">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title">
                        Account Address
                    </h5>
                    <div class="btn-group" role="group" aria-label="Basic example">
                      
                    @if (_ShowTab_UnUsedAddress)
                    {
                        <button type="button" class="btn btn-sm btn-primary mr-1" @onclick="GenerateAddress">Generate a new address</button>
                    }

@code {

    [Parameter]
    public string walletname { get; set; }
    [Parameter]
    public string accountname { get; set; }
    private void NavigateToWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletview/" + walletName + "/" + accountname);
    }
    private void NavigateToReceiveWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletreceive/" + walletName + "/" + accountname);
    }
    private void NavigateToSendWallet(string walletName, string accountname)
    {
        NavigationManager.NavigateTo("walletsend/" + walletName + "/" + accountname);
    }
    private void OnSelected(string selection)
    {
        Console.WriteLine(selection);
        NavigateToWallet(selection,"account 0");
        }
}